// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trsv-dev/simple-windows-services-monitor/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/trsv-dev/simple-windows-services-monitor/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddServer mocks base method.
func (m *MockStorage) AddServer(arg0 context.Context, arg1 models.Server, arg2 int64) (*models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServer indicates an expected call of AddServer.
func (mr *MockStorageMockRecorder) AddServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServer", reflect.TypeOf((*MockStorage)(nil).AddServer), arg0, arg1, arg2)
}

// AddService mocks base method.
func (m *MockStorage) AddService(arg0 context.Context, arg1, arg2 int64, arg3 models.Service) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddService indicates an expected call of AddService.
func (mr *MockStorageMockRecorder) AddService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddService", reflect.TypeOf((*MockStorage)(nil).AddService), arg0, arg1, arg2, arg3)
}

// BatchChangeServiceStatus mocks base method.
func (m *MockStorage) BatchChangeServiceStatus(arg0 context.Context, arg1 int64, arg2 []*models.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchChangeServiceStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchChangeServiceStatus indicates an expected call of BatchChangeServiceStatus.
func (mr *MockStorageMockRecorder) BatchChangeServiceStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchChangeServiceStatus", reflect.TypeOf((*MockStorage)(nil).BatchChangeServiceStatus), arg0, arg1, arg2)
}

// ChangeServiceStatus mocks base method.
func (m *MockStorage) ChangeServiceStatus(arg0 context.Context, arg1 int64, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeServiceStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeServiceStatus indicates an expected call of ChangeServiceStatus.
func (mr *MockStorageMockRecorder) ChangeServiceStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeServiceStatus", reflect.TypeOf((*MockStorage)(nil).ChangeServiceStatus), arg0, arg1, arg2, arg3)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), arg0, arg1)
}

// DelServer mocks base method.
func (m *MockStorage) DelServer(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelServer indicates an expected call of DelServer.
func (mr *MockStorageMockRecorder) DelServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelServer", reflect.TypeOf((*MockStorage)(nil).DelServer), arg0, arg1, arg2)
}

// DelService mocks base method.
func (m *MockStorage) DelService(arg0 context.Context, arg1, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelService indicates an expected call of DelService.
func (mr *MockStorageMockRecorder) DelService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelService", reflect.TypeOf((*MockStorage)(nil).DelService), arg0, arg1, arg2, arg3)
}

// EditServer mocks base method.
func (m *MockStorage) EditServer(arg0 context.Context, arg1 *models.Server, arg2, arg3 int64) (*models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditServer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditServer indicates an expected call of EditServer.
func (mr *MockStorageMockRecorder) EditServer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditServer", reflect.TypeOf((*MockStorage)(nil).EditServer), arg0, arg1, arg2, arg3)
}

// GetServer mocks base method.
func (m *MockStorage) GetServer(arg0 context.Context, arg1, arg2 int64) (*models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockStorageMockRecorder) GetServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockStorage)(nil).GetServer), arg0, arg1, arg2)
}

// GetServerWithPassword mocks base method.
func (m *MockStorage) GetServerWithPassword(arg0 context.Context, arg1, arg2 int64) (*models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerWithPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerWithPassword indicates an expected call of GetServerWithPassword.
func (mr *MockStorageMockRecorder) GetServerWithPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerWithPassword", reflect.TypeOf((*MockStorage)(nil).GetServerWithPassword), arg0, arg1, arg2)
}

// GetService mocks base method.
func (m *MockStorage) GetService(arg0 context.Context, arg1, arg2, arg3 int64) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockStorageMockRecorder) GetService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockStorage)(nil).GetService), arg0, arg1, arg2, arg3)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(arg0 context.Context, arg1 *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), arg0, arg1)
}

// GetUserServiceStatuses mocks base method.
func (m *MockStorage) GetUserServiceStatuses(arg0 context.Context, arg1 int64) ([]*models.ServiceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserServiceStatuses", arg0, arg1)
	ret0, _ := ret[0].([]*models.ServiceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserServiceStatuses indicates an expected call of GetUserServiceStatuses.
func (mr *MockStorageMockRecorder) GetUserServiceStatuses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserServiceStatuses", reflect.TypeOf((*MockStorage)(nil).GetUserServiceStatuses), arg0, arg1)
}

// ListServers mocks base method.
func (m *MockStorage) ListServers(arg0 context.Context, arg1 int64) ([]*models.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", arg0, arg1)
	ret0, _ := ret[0].([]*models.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockStorageMockRecorder) ListServers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockStorage)(nil).ListServers), arg0, arg1)
}

// ListServices mocks base method.
func (m *MockStorage) ListServices(arg0 context.Context, arg1, arg2 int64) ([]*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockStorageMockRecorder) ListServices(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockStorage)(nil).ListServices), arg0, arg1, arg2)
}

// ListUsers mocks base method.
func (m *MockStorage) ListUsers(arg0 context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStorageMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStorage)(nil).ListUsers), arg0)
}
